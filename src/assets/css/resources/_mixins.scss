////
/// @group 03-mixins
////

/// Function to dynamically set media-query expression depending on provided values.
/// @group 05-functions
/// @param {number|string} $min - media-query min-width value
/// @param {string} $min [null] - media-query max-width value
/// @return {string}
/// @example scss - Usage
///     @media #{media-expression($min, $max)} {
///         &:hover {
///             @content;
///         }
///     }

@function media-expression($min, $max: null) {
  $min: '(min-width: #{$min})';
  $expression: 'screen and #{$min}';

  @if $max {
    $max: '(max-width: #{$max})';
    $expression: $expression + 'and #{$max}';
  }

  @return $expression;
}

/// Add media-query and :hover pseudo class and wrap provided content with it.
/// @param {string} $min [$mq-tablet] - min-width media-query value
/// @param {string} $max [null] - max-width media-query value
/// @content the content will be wrapped in media-query and :hover pseudo class
/// @require $mq-tablet
/// @require media-expression
/// @example scss - Usage
///     @include hover() {
///         text-decoration: underline;
///     }

@mixin hover($min: $mq-tablet, $max: null) {
  @media #{media-expression($min, $max)} {
    &:hover {
      @content;
    }
  }
}

/// Add media-query and :focus pseudo class and wrap provided content with it.
/// @param {string} $min [$mq-tablet] - min-width media-query value
/// @param {string} $max [null] - max-width media-query value
/// @content the content will be wrapped in media-query and :focus pseudo class
/// @require $mq-tablet
/// @require media-expression
/// @example scss - Usage
///     @include focus() {
///         @include custom-focus();
///     }

@mixin focus($min: $mq-tablet, $max: null) {
  @media #{media-expression($min, $max)} {
    &:focus {
      @content;
    }
  }
}

/// Add media-query and :active pseudo class and wrap provided content with it.
/// @param {string} $min [$mq-tablet] - min-width media-query value
/// @param {string} $max [null] - max-width media-query value
/// @content the content will be wrapped in media-query and :active pseudo class
/// @require $mq-tablet
/// @require media-expression
/// @example scss - Usage
///     @include active() {
///         color: $color-link-regular-active;
///     }

@mixin active($min: $mq-tablet, $max: null) {
  @media #{media-expression($min, $max)} {
    &:active {
      @content;
    }
  }
}

/// Shorten to single line text to fit width and add <code>...</code> at the end.
/// @example scss - Usage
///     @include truncate();

@mixin truncate() {
  overflow: hidden;

  white-space: nowrap;

  text-overflow: ellipsis;
}

/// Wrap nested content in media-query build with provided values.
/// @group 03-mixins
/// @param {number|string} $min - media-query min-width value
/// @param {string} $min [null] - media-query max-width value
/// @content Returns content wrapped in media-query.
/// @require media-expression
/// @example scss - Usage
///     @include respond($mq-tablet, $mq-tablet-max) {
///         top: 2px;
///
///         font-size: $icon-size-n;
///     }

@mixin respond($min, $max: null) {
  @media #{media-expression($min, $max)} {
    @content;
  }
}

/// Wrap nested content in media-query of static values for tablet view with provided orientation. <br />
/// Possible values: <i>portrait, landscape</i>
/// @group 03-mixins
/// @param {string} $orientation [portrait] - media-query orientation value
/// @content Returns content wrapped in media-query.
/// @require $ipad-width
/// @require $ipad-height
/// @example scss - Usage
///     @include respondIpad(landscape) {
///         width: $ipad-actual-height;
///         height: $ipad-actual-width;
///     }

@mixin respondIpad($orientation: portrait) {
  @media only screen and (device-width: #{$ipad-width}) and (device-height: #{$ipad-height}) and (orientation: #{$orientation}) {
    @content;
  }
}
